from selenium import webdriver
import time

from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import getpass 
  
user = 'bijnor.saumya@gmail.com'#input('enter email: ') 
pwd = getpass.getpass("Password: ")


driver = webdriver.Chrome()
driver.get('https://www.linkedin.com/uas/login?goback=&trk=hb_signin')

driver.maximize_window()
email = driver.find_element_by_xpath('//*[@id="username"]')
email.send_keys(user)
password = driver.find_element_by_xpath('//*[@id="password"]')
password.send_keys(pwd) #########################################
login = driver.find_element_by_xpath('//*[@id="app__container"]/main/div/form/div[3]/button')
login.click()
print('Logged In')
time.sleep(150)

def get_page(page_num=0, post='data scientist'):
    post = 'data scientist'
    post = post.replace(" ", "%20")
    loc = 'Worldwide'
    job_page = 'https://www.linkedin.com/jobs/search/?f_LF=f_AL&keywords='
    job_page = job_page + post
    job_page = job_page + '&location=' + loc
    job_page = job_page + '&start=' + str(page_num) 
    return job_page

def easy_apply(jobid, count):
    button = driver.find_elements_by_xpath('//button[contains(@class, "jobs-apply-button")]/span[1]')
    time.sleep(10)

    try:
        button[0].click()
    except:
        count = count + 1
        pass

    while(True):
        try:
            button = driver.find_elements_by_xpath('//button[contains(@class, "artdeco-button")]/span[1]')
            time.sleep(10)
            button[0].click()
            time.sleep(10)
        except:
            count = count + 1
            break
    return jobid, count


def job_ids_current_page(links, IDs=None):
    if not IDs:
        IDs = []
    for link in links :
        try:
            temp = link.get_attribute("data-job-id")
            jobID = temp.split(":")[-1]
            IDs.append(int(jobID))
        except:
            pass
    return IDs

########### DONE
prev_jobID_list = [1667350338, 1626371040, 1667337933, 1670994604, 1664702170, 1660867943, 
                   1665264860, 1626371040, 1667337933, 1670994604, 1664702170, 1660867943, 1665264860, 1667375075, 1626371040, 1667337933, 1670994604, 1664702170, 1660867943, 1665264860, 1667375075, 1664634598, 1667337933, 1670994604, 
                   1664702170, 1660867943, 1665264860, 1667375075, 1664634598, 1665892905, 1670994604, 1665264860, 1667375075, 1664634598, 1665892905, 1666975130, 1666961614, 1626300354, 1665264860, 1664634598, 1665892905, 1666975130, 1666961614, 1626300354, 1667316348, 1644339148, 1664634598, 1666975130, 1666961614, 1626300354, 1667316348, 1644339148, 1654193704, 1665276929, 1626300354, 1667316348, 1644339148, 1654193704, 1665276929, 1667338824, 1666950758, 1626300354, 1667316348, 1644339148, 1654193704, 1665276929, 1667338824, 1666950758, 1670243424, 1667316348, 1644339148, 1654193704, 1665276929, 1667338824, 1666950758, 1670243424, 1619382489, 1654193704, 1665276929, 1667338824, 1666950758, 1670243424, 1619382489, 1623102746, 1654193704, 1667338824, 1666950758, 1670243424, 1619382489, 1623102746, 1670691441, 1667520666, 1667338824, 1670243424, 1619382489, 1623102746, 1670691441, 1667520666, 1652894451, 1626310377, 1670243424, 1670691441, 1667520666, 1652894451, 1626310377, 1644464225, 1654825183, 1609557648, 1667520666, 1652894451, 1626310377, 1644464225, 1654825183, 1609557648, 1566972648, 1652894451, 1626310377, 1644464225, 1654825183, 1609557648, 1566972648, 1670154286, 1626310377, 1644464225, 1654825183, 1609557648, 1566972648, 1670154286, 1666717931, 1644464225, 1654825183, 1609557648, 1566972648, 1670154286, 1666717931, 1636862880, 1609557648, 1566972648, 1670154286, 1666717931, 1636862880, 1665254498, 1170253356, 1566972648, 1670154286, 1666717931, 1636862880, 1665254498, 1170253356, 1666936589, 1566972648, 1670154286, 1666717931, 1636862880, 1665254498, 1170253356, 1666936589, 1664617128, 1670154286, 1666717931, 1636862880, 1665254498, 1170253356, 1666936589, 1664617128, 1626318732, 1636862880, 1665254498, 1170253356, 1666936589, 1664617128, 1626318732, 1667338800, 1170253356, 1666936589, 1664617128, 1626318732, 1667338800, 1626593867, 1656974141, 1664617128, 1626318732, 1667338800, 1626593867, 1656974141, 1660562372, 1626361683, 1664617128, 1667338800, 1626593867, 1656974141, 1660562372, 1626361683, 1667192114, 1656148738, 1667338800, 1626593867, 1656974141, 1660562372, 1626361683, 1667192114, 1656148738, 1644379675, 1626593867, 1660562372, 1626361683, 1667192114, 1656148738, 1644379675, 1619361711, 1654856635, 1660562372, 1667192114, 1656148738, 1644379675, 1619361711, 1654856635, 1654890370, 1665265364, 1667192114, 1644379675, 1619361711, 1654856635, 1654890370, 1665265364, 1667135544, 1626375958, 1619361711, 1654856635, 1654890370, 1665265364, 1667135544, 1626375958, 1670699383, 1619361711, 1654856635, 1654890370, 1665265364, 1667135544, 1626375958, 1670699383, 1660650054, 1654890370, 1665265364, 1667135544, 1626375958, 1670699383, 1660650054, 1650605440, 1654890370, 1566354689, 1667464706, 1646889218, 1667753607, 1667354760, 1651072521, 1638047242, 1672056331, 1643500681, 1653790992, 1647849233, 1667739538, 1660229651, 1668050583, 1599908768, 1628402214, 1616692263, 1660965160, 1668773545, 1540499499, 1457657644, 1670675504, 1668400177, 1646450738, 1616604725, 1306043573, 1667385022, 1645866816, 1580537030, 1556348365, 1607879632, 1668035921, 1656665680, 1616685652, 1632804565, 1626368854, 1609517282, 1672238181, 1667754598, 1598140135, 1673323109, 1671370730, 1662098416, 1663538674, 1619352564, 1656126452, 1648586745, 1521154170, 1673810811, 1599298045, 1540484863, 1619361711,
                   1670841088, 1271385602, 1653379203, 1649306370, 1641089162, 1673805195, 1654823694, 1668460179, 1656823315, 1671023128, 1668433689, 1672145433, 1626377883, 1628407066, 1667523224, 1672175264, 1672277666, 1628408739, 
                   1672201899, 1617271083, 1628439471, 1652003122, 1623191603, 1628407220, 1650645812, 1573159223, 1306098618, 1654191547, 1664788036, 1672780871, 1672182858, 1616597965, 1672057174, 1670695769, 1668711003, 1673060829, 1667381981, 1673235682, 1667706850, 1559652453, 1626393064, 1673573612, 1672867950, 1670901233, 1671860724, 1306769399, 1628440825, 1672215419,
                   1668445395, 1671877074, 1676628230, 1670737929, 1676614161, 1632905618, 1632920339, 1671114643, 1632901653, 1676701462, 1671104529, 1618001555, 1626301211, 1675791515, 1671116187, 1671114654, 1632908960, 1566316449, 1676082980, 1671242533, 1628499881, 1602838314, 1670772140, 1676698544, 1670794033, 1632909365, 1551296184, 1673861052, 1628498237, 1632903233, 1676627911, 1632917707, 1616641484, 1632901457, 1671877074, 1668445395, 1671106004, 1632900820, 1671279442, 1670729302, 1632913752, 1670740315, 1628482139, 1569460959, 1669924576, 1632907491, 1676046052, 1628474724, 1616686572, 1392822386, 1667395314, 1676674679, 1671192824, 1670488954, 
                   1392822386, 1632966914, 1677928196, 1632977797, 1672469223, 1672412616, 1671959733, 1632979670, 1677945047, 1676762936, 1632982685, 
                   1676920193, 1632922626, 1676316294, 1632932359, 1676973958, 1392869516, 1672470284, 1672903828, 1632925590, 1632962966, 1677936918, 1678253084, 1671698076, 1632972830, 1672457757, 1672496801, 1671676068, 1677993386, 1632913836, 1677932975, 1671980340, 1672918075, 1632979390, 1651123006, 1671169729, 1669077445, 1671114701, 1678287312, 1672498002, 1632957779, 1632915669, 1671953367, 1671124826, 1632980570, 1678236639, 1672496352, 1632990689, 1672925924, 1671664359, 1632965351, 1672497641, 1676870768, 1632972273, 1671652083, 1676666997, 1676698742, 1672413179, 1671994749, 1632904446, 1672471423, 
                   1674010240, 1636022017, 1632985221, 1679259014, 1674053896, 1392869516, 1636005011, 1636025108, 1679570326, 1678641439, 1666962080, 1674087585, 1674018979, 1677913642, 1678976048, 1674012086, 1678455098, 1673497532, 1636010306, 1679596099, 1632973002, 1674055371, 1672494669, 1636020946, 1674069204, 1672905684, 1679351260, 1678260572, 1678439519, 1632975967, 1515160801, 1677843939, 1671136739, 1636016999, 1679266157, 1672983412, 1674008824,
                   1688847233, 1682006533, 1680495365, 1518838150, 1687708553, 1643278605, 1682034958, 1675441677, 1681663120, 1677105681, 1679772691, 1687708307, 1674635545, 1683025178, 1671170461, 1675874848, 1679095077, 1687725094, 1639016616, 1679783084, 1676509105, 1681007924, 1680408503, 1680495032, 1636034874, 1643290299, 1681046079, 1645033795, 1687934534, 1682028487, 1643281095, 1680481481, 1681099338, 1686938438, 1680525260, 1680491976, 1675492942, 1688000852, 1682816598, 1645034201, 1645048541, 1682037855, 1643287647, 1688546786, 1643295207, 1680701289, 1680349161,
                   1680461043, 1687608565, 1687592565, 1645034870,
                   1687621635, 1688191492, 1681044997, 1639038474, 1677119754, 1682017292, 1680419213, 1675852426, 1582165649, 1645053206, 1677145879, 1682045975, 1682019095, 1673494934, 1518835487, 1643278496, 1645015711, 1687680930, 1675841441, 1688101281, 1681478060, 1681494959, 1682028083, 1639951027, 1643287096, 1681492924, 1674659006, 1679855426, 1639088580, 1636022470, 1682749641, 1680314571, 1674678349, 1682048590, 1645053774, 1681242703, 1639072209, 1681008341, 1682798294, 1680583897, 1681908827, 1680407772, 1688069596, 1682047708, 1643275867, 1626332516, 1672967910, 1680884071, 1678082793, 1682037739, 1674093163, 1687916269, 1639015023, 1682028400, 1680450546, 1674604018,
                   1705124996, 1695596044, 1706494991, 1659264532, 1655895832, 1659252249, 1659224089, 1664080795, 1705330680, 1661783709, 1673684632, 1659216543, 1699408800, 1699332257, 1704890532, 1705015336, 1659263146, 1696629164, 1690406957, 1664078510, 1692552109, 1664094515, 1682072244, 1664079413, 1690972344, 1705317311, 1685639872, 1696607809, 1701956931, 1673677124, 1706129221, 1678112580, 1664090698, 1700461771, 1680732367, 1706650703, 1691584082, 1690930516, 1678111575, 1695566808, 1704454487, 1696637536, 1673661921, 1664088037, 1693186793, 1692233580, 1655887470, 1670009460, 1704976504]


# Fix next
# Fix submit
# Fix tick

#prev_jobID_list.extend(jobID_list)
#print(len(set(prev_jobID_list)))

page_reloads = 0
max_jobs = 50
              
jobID_list = [1704979456, 1670008705, 1706752387, 1664090877, 1700235277, 1706810383, 1670084240, 1704896657, 1664072082, 1689997843, 1646138134, 1690405399, 1678114459, 1673683486, 1653410087, 1670045629, 1664090687, 1699781443, 1706680904, 1653477449, 1659289293, 1699736526, 1686571218, 1655827454, 1704823780, 1688370021, 1645073509, 1696696167, 1664071527, 1659216619, 1707046635, 1684103289, 1518868093, 1692612862]

while len(set(jobID_list)) <= max_jobs:
    driver.get(get_page(page_num=page_reloads))
    links = driver.find_elements_by_xpath('//div[@data-job-id]')
    time.sleep(10)
    if links:
        ID_list = job_ids_current_page(links)
    for jid in ID_list:
        if jid not in prev_jobID_list:
            jobID_list.append(jid)
    #print(jobID_list)
    #print(i, 'num of jobs to be applied: ', len(set(jobID_list)))
    page_reloads += 1
            
print('page_reloads req', page_reloads)
print('num of jobs to be applied: ', len(set(jobID_list)))
print(set(jobID_list))

driver.close()

'''

count_applied = 0
for jobid in set(jobID_list):
    job = 'https://www.linkedin.com/jobs/view/'+ str(jobid)
    driver.get(job)
    time.sleep(10)
    jobid, count_applied = easy_apply(jobid, count_applied)
    print(jobid, count_applied)
    time.sleep(10)
driver.close()

#1,2


#notifications = driver.find_element_by_xpath('//a[contains(@href,"notifications")]')
#notifications.click()

#jobs = driver.find_element_by_xpath('//a[contains(@href,"jobs")]')
#jobs.click()

#//*[@aria-describedby = "description_2822cb3d798c"]

search_jobs = driver.find_element_by_xpath('//*[@id="username"]')
search_jobs.send_keys('bijnor.saumya@gmail.com')
location = driver.find_element_by_xpath('//*[@id="password"]')
location.send_keys('****')
search = driver.find_element_by_xpath('//*[@id="app__container"]/main/div/form/div[3]/button')
search.click()

#driver.find_element_by_id(“submit”).click()
# already added filters in Linkedin for jobs which comes in notifications
#browser.get('https://www.linkedin.com/notifications/')
#browser.get('https://www.linkedin.com/jobs/view/1589575826/?alternateChannel=jymbii')
'''